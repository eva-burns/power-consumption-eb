geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# power
# plot(power$Datetime,power$PowerConsumption_Zone2, type='l')
# plot(power$Datetime,power$PowerConsumption_Zone3, type='l')
# plot(power$Datetime,power$Temperature, type='l')
library(reshape2)
cormat <- round(cor(power[c('PowerConsumption_Zone1', 'Temperature', 'Humidity', 'WindSpeed', 'GeneralDiffuseFlows', 'DiffuseFlows', 'PowerConsumption_Zone2', 'PowerConsumption_Zone3')]),2)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- cormat
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# power
# plot(power$Datetime,power$PowerConsumption_Zone2, type='l')
# plot(power$Datetime,power$PowerConsumption_Zone3, type='l')
# plot(power$Datetime,power$Temperature, type='l')
library(reshape2)
cormat <- round(cor(power[c('PowerConsumption_Zone1', 'Temperature', 'Humidity', 'WindSpeed', 'GeneralDiffuseFlows', 'DiffuseFlows', 'PowerConsumption_Zone2', 'PowerConsumption_Zone3')]),2)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- cormat
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# power
# plot(power$Datetime,power$PowerConsumption_Zone2, type='l')
# plot(power$Datetime,power$PowerConsumption_Zone3, type='l')
# plot(power$Datetime,power$Temperature, type='l')
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1, 0.7),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(2, 0.7),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.5, 0.7),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.2, 0.7),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.4, 0.7),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.4, 0),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.4, 0.1),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.3, 0.1),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.35, 0.1),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
hist(train$PowerConsumption_Zone1)
durbin.watson(train$PowerConsumption_Zone1)
durbinWatsonTest(train$PowerConsumption_Zone1)
adf.test(ts(train$PowerConsumption_Zone1))
adf.test(ts(train$PowerConsumption_Zone1))
kpss.test(ts(train$PowerConsumption_Zone1))
durbinWatsonTest(train$PowerConsumption_Zone1)
sum(is.na(power$PowerConsumption_Zone1))
saveRDS(model, "tbats.rds")
saveRDS(model_2, "sarima.rds")
setwd("~/Documents/Grad School/Spring 2023/Time Series/power-consumption-eb")
knitr::opts_chunk$set(echo = TRUE, dpi=300)
power %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
ggtitle("Plot of length \n by dose") +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_sarima$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted")) +
coord_x_datetime(xlim = c("2017-10-01 00:00:00", "2017-12-30 23:50:00"))
power <- read.csv("data/powerconsumption.csv")
idx <- which(power$Datetime %in% c('12/1/2017 0:00'))
power$Datetime <- as.POSIXct(power$Datetime, format = "%m/%d/%Y %H:%M")
head(power, 3)
train <- power[1:(idx - 1),]
test <- power[idx:nrow(power),]
train_ts <- ts(train$PowerConsumption_Zone1)
library(tidyverse)
library(forecast)
library(xts)
library(TSA)
library(tidyquant)
library(tseries)
library(lmtest)
library(car)
library(reshape2)
power <- read.csv("data/powerconsumption.csv")
idx <- which(power$Datetime %in% c('12/1/2017 0:00'))
power$Datetime <- as.POSIXct(power$Datetime, format = "%m/%d/%Y %H:%M")
head(power, 3)
train <- power[1:(idx - 1),]
test <- power[idx:nrow(power),]
train_ts <- ts(train$PowerConsumption_Zone1)
hist(train$PowerConsumption_Zone1, main = "Histogram of Power Consumption (Zone 1)", xlab = "PowerConsumption_Zone1")
cormat <- round(cor(power[c('PowerConsumption_Zone1', 'Temperature', 'Humidity', 'WindSpeed', 'GeneralDiffuseFlows', 'DiffuseFlows', 'PowerConsumption_Zone2', 'PowerConsumption_Zone3')]),2)
# Melt the correlation matrix
melted_cormat <- melt(cormat, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.35, 0.1),
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.5))
p <- periodogram(train_ts)
max_freq <- p$freq[which.max(p$spec)]
seasonality <- 1/max_freq
seasonality
if (file.exists("tbats.rds")) {
tbats_model <- readRDS("tbats.rds")
} else {
tbats_model <- tbats(train_ts, seasonal.periods = c(144))
saveRDS(tbats_model, "tbats.rds")
}
tbats_model
comp <- tbats.components(tbats_model)
plot(comp)
train_ts <- ts(train$PowerConsumption_Zone1, frequency = 144)
if (file.exists("sarima.rds")) {
sarima_model <- readRDS("sarima.rds")
} else {
sarima_model <- auto.arima(train_ts)
saveRDS(sarima_model, "sarima.rds")
}
sarima_model
fc_tbats <- forecast(tbats_model, h=nrow(test))
power %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_tbats$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted")) +
coord_x_datetime(xlim = c("2017-10-01 00:00:00", "2017-12-30 23:50:00"))
test %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_tbats$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted"))
acc <- data.frame(accuracy(fc_tbats, test$PowerConsumption_Zone1)[2,1:5])
accuracy(fc_tbats, test$PowerConsumption_Zone1)
fc_sarima <- forecast(sarima_model, h=nrow(test))
power %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
ggtitle("Plot of length \n by dose") +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_sarima$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted")) +
coord_x_datetime(xlim = c("2017-10-01 00:00:00", "2017-12-30 23:50:00"))
test %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_sarima$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted"))
acc[2] <- accuracy(fc_sarima, test$PowerConsumption_Zone1)[2,1:5]
accuracy(fc_sarima, test$PowerConsumption_Zone1)
tbat_plot_1 <- power %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
ggtitle("TBATS Forecasted Power Consumption (Zone 1)") +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_tbats$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted")) +
coord_x_datetime(xlim = c("2017-10-01 00:00:00", "2017-12-30 23:50:00"))
tbat_plot_1
```{r compare}
acc
colnames(acc) <- c("TBATS", "SARIMA")
acc <- t(acc)
acc
library(tidyverse)
library(forecast)
library(xts)
library(TSA)
library(tidyquant)
library(tseries)
library(lmtest)
library(car)
library(reshape2)
power <- read.csv("data/powerconsumption.csv")
idx <- which(power$Datetime %in% c('12/11/2017 0:00'))
power$Datetime <- as.POSIXct(power$Datetime, format = "%m/%d/%Y %H:%M")
head(power, 3)
train <- power[1:(idx - 1),]
test <- power[idx:nrow(power),]
train_ts <- ts(train$PowerConsumption_Zone1)
hist(train$PowerConsumption_Zone1, main = "Histogram of Power Consumption (Zone 1)", xlab = "PowerConsumption_Zone1")
acf(ts(train$PowerConsumption_Zone1), xlab = "lag #", ylab = 'ACF',main=' ')
adf.test(ts(train$PowerConsumption_Zone1))
kpss.test(ts(train$PowerConsumption_Zone1))
durbinWatsonTest(train$PowerConsumption_Zone1)
if (file.exists("tbats.rds")) {
tbats_model <- readRDS("tbats.rds")
} else {
# build model if not done already
tbats_model <- tbats(train_ts, seasonal.periods = c(144))
saveRDS(tbats_model, "tbats.rds")
}
tbats_model
comp <- tbats.components(tbats_model)
plot(comp)
train_ts <- ts(train$PowerConsumption_Zone1, frequency = 144)
if (file.exists("sarima.rds")) {
sarima_model <- readRDS("sarima.rds")
} else {
# build model if not done already
sarima_model <- auto.arima(train_ts)
saveRDS(sarima_model, "sarima.rds")
}
sarima_model
fc_tbats <- forecast(tbats_model, h=nrow(test))
tbat_plot_1 <- power %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
ggtitle("TBATS Forecasted Power Consumption (Zone 1)") +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_tbats$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted")) +
coord_x_datetime(xlim = c("2017-10-01 00:00:00", "2017-12-30 23:50:00"))
tbat_plot_2 <- test %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
ggtitle("TBATS Forecasted Power Consumption (Zone 1) Zoomed In") +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_tbats$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted"))
tbat_plot_1
tbat_plot_2
acc <- data.frame(accuracy(fc_tbats, test$PowerConsumption_Zone1)[2,1:5])
accuracy(fc_tbats, test$PowerConsumption_Zone1)
fc_sarima <- forecast(sarima_model, h=nrow(test))
sarima_plot_1 <- power %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
ggtitle("SARIMA Forecasted Power Consumption (Zone 1)") +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_sarima$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted")) +
coord_x_datetime(xlim = c("2017-10-01 00:00:00", "2017-12-30 23:50:00"))
sarima_plot_2 <- test %>%
ggplot(aes(x = Datetime, y = PowerConsumption_Zone1, color='Actual')) +
ggtitle("SARIMA Forecasted Power Consumption (Zone 1) Zoomed In") +
geom_line() +
geom_line(data = test, mapping =
aes(x = Datetime, y = fc_sarima$mean, color="Predicted")) +
scale_color_manual(name = "Data",
values = c( "Actual" = "black", "Predicted" = "red"),
labels = c("Actual", "Predicted"))
sarima_plot_1
sarima_plot_2
acc[2] <- accuracy(fc_sarima, test$PowerConsumption_Zone1)[2,1:5]
accuracy(fc_sarima, test$PowerConsumption_Zone1)
colnames(acc) <- c("TBATS", "SARIMA")
acc <- t(acc)
acc
acc[1,2]
acc
